#!/bin/bash
# Copyright Chris David, 2017, 2018
# See LICENSE.txt

# ${:-} provides for default when not defined externally
BMG_BUILD_CMD=${BMG_BUILD_CMD:-"echo no build command defined"}
BMG_HYSTERESIS_TIME=${BMG_HYSTERESIS_TIME:-"0.1"}

set -e

# xtra debuggin
#set -x

bmg__trace() {
    echo -n
#    echo "$@"
}

bmg__build() {
    while [ -e ${BMG__TMP_FOLDER}/.bmg__kick_build ] ; do
        bmg__trace running build
        rm ${BMG__TMP_FOLDER}/.bmg__kick_build
        ${BMG_BUILD_CMD} ${BMG__ROOTDIR} || true
    done
}

bmg__loop() {
    bmg__trace loop start
    while [ -e ${BMG__TMP_FOLDER}/.bmg__running ] ; do
        # if the .bmg__kick_build was touched
        bmg__trace in loop
        bmg__trace ${BMG__DETECT_KICK}
        CHANGE=$(${BMG__DETECT_KICK})
        if [ "${CHANGE}" ]; then
            bmg__trace 'received kick'
            # do the build
            bmg__build
        else
            bmg__trace 'ignoring kick'
        fi
        # sleep gives time for this loop to detect removal of .bmg__running
        sleep 0.1
        bmg__trace looping
    done
    bmg__trace loop done
}

bmg__clean_up() {
    bmg__trace clean up
    [ -e {BMG__TMP_FOLDER}/.bmg__kick_build ] && rm ${BMG__TMP_FOLDER}/.bmg__kick_build
    rm ${BMG__TMP_FOLDER}/.bmg__running
    bmg__trace deleted
    kill -s SIGINT ${BMG__LOOPPID}
}

bmg__kick_build() {
    if [ "${BMG__KICK_HYSTERESIS_PID}" ] && kill -0 ${BMG__KICK_HYSTERESIS_PID} >> /dev/null; then
        bmg__trace kill  ${BMG__KICK_HYSTERESIS_PID}
        kill ${BMG__KICK_HYSTERESIS_PID}
    fi
    bmg__trace scheduling kick
    (sleep ${BMG_HYSTERESIS_TIME} && bmg__trace touch ${BMG__TMP_FOLDER}/.bmg__kick_build && touch ${BMG__TMP_FOLDER}/.bmg__kick_build ) &
    BMG__KICK_HYSTERESIS_PID=$!
}

bmg__git_ignored() {
    git check-ignore "$1" || true
}

bmg__watch_for_changes() {
    while [ -e ${BMG__TMP_FOLDER}/.bmg__running ] ; do
        CHANGE=$(${BMG__DETECT_CHANGE})
        if [ "${CHANGE}" -a "${CHANGE}" != ${BMG__TMP_FOLDER}/.bmg__kick_build  ] ; then
            IGNORED=$(bmg__git_ignored "${CHANGE}")
            if [ ! "${IGNORED}" ] ; then
                # do the build
                echo detected change: ${CHANGE}
                bmg__kick_build
            else
                bmg__trace ignoring change: ${CHANGE}
            fi
        fi
    done
}

bmg__detect_inotify_or_fswatch() {
    if [ "$(which inotifywait)" ] ; then
        echo "using $(which inotifywait)"
        BMG__DETECT_CHANGE="$(which inotifywait) -r -e close_write ${BMG__ROOTDIR}/ | awk -e '{print \$3}'"
        BMG__DETECT_KICK="$(which inotifywait) -e close_write ${BMG__TMP_FOLDER}/ | grep 'CLOSE_WRITE,CLOSE .bmg__kick_build' )"
    elif [ "$(which fswatch)" ] ; then
        echo "using $(which fswatch)"
        BMG__DETECT_CHANGE="$(which fswatch) -r1 ."
        BMG__DETECT_KICK="$(which fswatch) -1 ${BMG__TMP_FOLDER}/.bmg__kick_build"
    else
        echo "ERROR did not detect inotifywait nor fswatch in path"
        exit 1
    fi
}

bmg__main() {
    BMG__ROOTDIR=$(cd "${1}" && pwd)
    BMG__TMP_FOLDER="${BMG__ROOTDIR}"
    bmg__trace using ${BMG__TMP_FOLDER}/.bmg__kick_build
    [ -e "${BMG__ROOTDIR}/.bmg" ] && . "${BMG__ROOTDIR}/.bmg"
    bmg__detect_inotify_or_fswatch
    touch ${BMG__TMP_FOLDER}/.bmg__running
    ( bmg__loop ) &
    BMG__LOOPPID=$!
    bmg__watch_for_changes
    wait
    bmg__trace done waiting
}

trap bmg__clean_up SIGINT SIGTERM
trap bmg__kick_build SIGHUP

bmg__main ${@}
